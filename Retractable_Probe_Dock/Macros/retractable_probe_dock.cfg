# 

[gcode_macro _Probe_Dock_Servo_Variables]
variable_servo_name:                      'probe_dock_servo'    # the name in your [servo] section of printer.cfg
variable_servo_extended_angle:            85
variable_servo_retracted_angle:           175                # default to initial_angle in [servo] section
gcode:

###########################
# Extend Probe Dock Routine
[gcode_macro extend_probe_dock]
description: Extend Klicky Probe Dock
gcode:
    # Get probe dock servo variables
    {% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
    
    {% set initial_angle = printer['configfile'].config["servo " + servo_name]['initial_angle']|int %}
    
    {% if 'servo_extended_angle' in printer["gcode_macro _Probe_Dock_Servo_Variables"] %}
        {% set SEA = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_extended_angle | int %}
    {% else %}
        {% set SEA = initial_angle + 180 %}
    {% endif %}
        
    { action_respond_info("Extending Probe Dock: Angle = " + SEA|string) }
    SET_SERVO SERVO={servo_name} ANGLE={SEA}
    M400      # wait for the move to finish

############################
# Retract Probe Dock Routine
[gcode_macro retract_probe_dock]
description: Retract Klicky Probe Dock
gcode:
    # Get probe dock servo variables
    {% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
    
    {% set initial_angle = printer['configfile'].config["servo " + servo_name]['initial_angle']|int %}
    
    {% if 'servo_retracted_angle' in printer["gcode_macro _Probe_Dock_Servo_Variables"] %}
        {% set SRA = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_retracted_angle | int %}
    {% else %}
        {% set SRA = initial_angle %}
    {% endif %}
    
    { action_respond_info("Retracting Probe Dock: Angle = " + SRA|string) }
    SET_SERVO SERVO={servo_name} ANGLE={SRA}
    M400      # wait for the move to finish

[gcode_macro vibrate_brush]
description: [COUNT=xxx] (default is 30 times)
gcode:
    {% set count = params.COUNT|default(20)|int %}
    {% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
    {% set servo_extended_angle = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_extended_angle | int %}
    {% set initial_brush_angle = servo_extended_angle - 5 | int %}
    {% for iters in range(1, count) %}
        {% set brush_angle = initial_brush_angle + 20 * (iters % 2) | int %}
        SET_SERVO SERVO={servo_name} ANGLE={brush_angle}
    {% endfor %}
    
[gcode_macro servo_stress_test]
description: [COUNT=xxx] (default is 10 times)
gcode:
    {% set count = params.COUNT|default(10)|int %}
    {% for iters in range(1, count) %}
        extend_probe_dock
        retract_probe_dock
    {% endfor %}
    
[gcode_macro docking_stress_test]
description: [COUNT=xxx] (default is 10 times)

variable_prep_spd_xy:        3600	         ; Travel speed along x and y-axis in mm/min.

gcode:
    {% set count = params.COUNT|default(10)|int %}
    {% set Bx = printer.configfile.config["stepper_x"]["position_endstop"]|float %}
    {% set By = printer.configfile.config["stepper_y"]["position_endstop"]|float %}
        
    {% for iters in range(1, count) %}
        dock_probe
        # move to a random location
        {% set x_pos = range(0, Bx|int)|random| int %}
        {% set y_pos = range(0, By|int)|random| int %}
        G0 X{x_pos} Y{x_pos} F{prep_spd_xy}
        
        attach_probe
        # move to a random location
        {% set x_pos = range(0, Bx|int)|random| int %}
        {% set y_pos = range(0, By|int)|random| int %}
        G0 X{x_pos} Y{x_pos} F{prep_spd_xy}
    {% endfor %}

[gcode_macro clean_nozzle]
# This macro is based on nozzle_scrub macro config by Hernsl (hernsl#8860 on Voron Design discord) 
# Edwardyeeks (edwardyeeks#6042 on Voron Design Discord).
#
# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   __________________                                                         ↑
#                  |                  |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                  | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |__________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:             25
variable_nozzle_dip:            2          ; how far down from brush_top to dip the nozzle for brushing

## For V2.4 350mm build, uncomment this below:
#variable_brush_start:     75
# it is installed on the left
variable_brush_start:     0

# This value is defaulted from brush location in CAD (rear left). Change if your brush width is different.
variable_brush_width:          52	

## These are only used if location_bucket_rear is False. You specify a custom location in y axis for your brush - see diagram above. ##
variable_brush_front:       340          
variable_brush_depth:       10       

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary.
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
#variable_wipe_qty:              1	         ; Number of complete (A complete wipe: start left, go right, go left) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        1000	         ; Nozzle wipe speed in mm/min.

variable_brush_cycles:      26

gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Grab the endstop y so we can backup if position_max > position_endstop
      {% set By = printer.configfile.config["stepper_y"]["position_endstop"]|float %}
   
      ## bring up the brush
      extend_probe_dock
      
      ## Position for wipe.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start} F{prep_spd_xy}

      G1 Y{brush_front + (brush_depth / 2)}
      
      ## Move nozzle down into brush.
      {% set nozzle_height = brush_top - nozzle_dip %}
      {% if nozzle_height < 0 %}              ; double checking
          {% set nozzle_height = brush_top %}
      {% endif %}
      G1 Z{nozzle_height} F{prep_spd_z}
   
      ## Perform wipe.
      vibrate_brush count={brush_cycles}
      #{% for wipes in range(1, (wipe_qty + 1)) %}
          G1 X{brush_start + brush_width} F{wipe_spd_xy}
      #    G1 X{brush_start} F{wipe_spd_xy}
      #{% endfor %}
      
      retract_probe_dock
      
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      #G1 X{bucket_left_width / 4} F{prep_spd_xy} 
      # Move to the left of the brush_start
      #G1 X{brush_start - bucket_left_width / 4} F{prep_spd_xy}

      ## Back up to where the endstop is
      G1 X{brush_start} Y{By} F{prep_spd_xy}

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}

# Apparently, you cannot renamed user defined gcode_macros
#[gcode_macro Attach_Probe]
#rename_existing:             _Attach_Probe
#gcode:
#    extend_probe_dock
#    _Attach_Probe
#    retract_probe_dock
  
#[gcode_macro Dock_Probe]
#rename_existing:             _Dock_Probe
#gcode:
#    extend_probe_dock
#    _Dock_Probe
#    retract_probe_dock
    
